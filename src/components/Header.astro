---
import { siteConfig } from "../config";
import { translations } from "../i18n/translations";
import { language } from "../store/language";
import SettingsModal from "./SettingsModal.astro";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;

const t = translations[language.get()];
---

<header
  id="header"
  class="fixed top-0 left-0 right-0 z-40 transition-all duration-300"
>
  <div class="absolute inset-0 bg-background/80 backdrop-blur-sm"></div>
  
  <nav class="relative max-w-7xl mx-auto px-4 sm:px-6 py-3 sm:py-4">
    <div class="flex items-center justify-between">
      <!-- Logo/Name -->
      <button 
        onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
        class="text-xl font-bold tracking-tight transition-colors duration-300 hover:text-[var(--accent-color)] animate-hidden"
        id="name-button"
      >
        {siteConfig.name}
      </button>

      <!-- Desktop Navigation -->
      <ul class="hidden md:flex items-center justify-center gap-8 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 nav-items">
        <li>
          <a
              href="#about"
              class="nav-link animate-hidden"
              data-nav-key="about"
          >
            {t.nav.about}
          </a>
        </li>
        {
          hasProjects && (
            <li>
              <a
                href="#projects"
                class="nav-link animate-hidden"
                data-nav-key="projects"
              >
                {t.nav.projects}
              </a>
            </li>
          )
        }
        {
          hasExperience && (
            <li>
              <a
                href="#experience"
                class="nav-link animate-hidden"
                data-nav-key="experience"
              >
                {t.nav.experience}
              </a>
            </li>
          )
        }
        {
          hasEducation && (
            <li>
              <a
                href="#education"
                class="nav-link animate-hidden"
                data-nav-key="education"
              >
                {t.nav.education}
              </a>
            </li>
          )
        }
      </ul>

      <div class="flex items-center gap-2">
        <!-- Settings Button -->
        <button
          id="settings-button"
          class="p-2 transition-colors duration-300 hover:text-[var(--accent-color)] rounded-md animate-hidden"
          aria-label="Settings"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
            <circle cx="12" cy="12" r="3" />
          </svg>
        </button>

        <!-- Mobile Menu Button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 transition-colors duration-300 hover:text-[var(--accent-color)] rounded-md animate-hidden"
          aria-label="Toggle menu"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="24" 
            height="24" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            stroke-width="2" 
            stroke-linecap="round" 
            stroke-linejoin="round"
          >
            <line x1="4" x2="20" y1="12" y2="12"/>
            <line x1="4" x2="20" y1="6" y2="6"/>
            <line x1="4" x2="20" y1="18" y2="18"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div
      id="mobile-menu"
      class="md:hidden fixed inset-x-0 top-[57px] sm:top-[65px] p-4 bg-background/80 backdrop-blur-sm border-t border-border transform -translate-y-full transition-transform duration-300"
    >
      <ul class="flex flex-col gap-2">
        <li>
          <a
            href="#about"
            class="mobile-nav-link"
            data-nav-key="about"
          >
            {t.nav.about}
          </a>
        </li>
        {
          hasProjects && (
            <li>
              <a
                href="#projects"
                class="mobile-nav-link"
                data-nav-key="projects"
              >
                {t.nav.projects}
              </a>
            </li>
          )
        }
        {
          hasExperience && (
            <li>
              <a
                href="#experience"
                class="mobile-nav-link"
                data-nav-key="experience"
              >
                {t.nav.experience}
              </a>
            </li>
          )
        }
        {
          hasEducation && (
            <li>
              <a
                href="#education"
                class="mobile-nav-link"
                data-nav-key="education"
              >
                {t.nav.education}
              </a>
            </li>
          )
        }
      </ul>
    </div>
  </nav>
</header>

<SettingsModal />

<style>
  .nav-link {
    @apply relative py-1 text-muted-foreground transition-colors duration-300 hover:text-[var(--accent-color)] text-base font-medium;
  }

  .mobile-nav-link {
    @apply block w-full px-4 py-2 text-muted-foreground hover:text-[var(--accent-color)] rounded-md transition-colors duration-300;
  }
</style>

<script>
  const header = document.getElementById('header');
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  let isMenuOpen = false;

  // Handle scroll
  window.addEventListener('scroll', () => {
    if (window.scrollY > 0) {
      header?.classList.add('shadow-sm');
    } else {
      header?.classList.remove('shadow-sm');
    }
  });

  // Handle mobile menu
  mobileMenuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    if (isMenuOpen) {
      mobileMenu?.classList.remove('-translate-y-full');
    } else {
      mobileMenu?.classList.add('-translate-y-full');
    }
  });

  // Close mobile menu when clicking a link
  const mobileLinks = document.querySelectorAll('.mobile-nav-link');
  mobileLinks.forEach(link => {
    link.addEventListener('click', () => {
      isMenuOpen = false;
      mobileMenu?.classList.add('-translate-y-full');
    });
  });

  // Listen for language changes
  import { language } from '../store/language';
  import { translations } from '../i18n/translations';

  function updateNavText(lang: keyof typeof translations) {
    const t = translations[lang];
    
    // Update navigation text
    document.querySelectorAll('[data-nav-key]').forEach(el => {
      const key = el.getAttribute('data-nav-key');
      if (key && key in t.nav) {
        el.textContent = t.nav[key as keyof typeof t.nav];
      }
    });
  }

  language.subscribe(updateNavText);

  // Theme-aware header background
  window.addEventListener("scroll", () => {
    const header = document.getElementById("header");
    const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
    
    if (window.scrollY > 100) {
      header?.classList.add("bg-background/80", "backdrop-blur-sm");
    } else {
      header?.classList.remove("bg-background/80", "backdrop-blur-sm");
    }
  });
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>