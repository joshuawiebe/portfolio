---
---

<div
  id="loading-screen"
  class="fixed inset-0 z-50 flex items-center justify-center bg-background transition-all duration-500"
>
  <div class="relative">
    <div class="loader-container">
      <div class="loader">
        <div class="hexagon-container">
          {Array.from({ length: 6 }).map((_, i) => (
            <div class="hexagon" style={`--index: ${i};`}>
              <div class="hexagon-inner"></div>
            </div>
          ))}
        </div>
        <div class="scanner"></div>
        <div class="code-rings">
          {Array.from({ length: 3 }).map((_, i) => (
            <div class="ring" style={`--ring: ${i};`}>
              <div class="ring-content"></div>
            </div>
          ))}
        </div>
        <div class="pulse-rings">
          {Array.from({ length: 4 }).map((_, i) => (
            <div class="pulse" style={`--pulse: ${i};`}></div>
          ))}
        </div>
      </div>
      <div class="loader-status">
        <div class="status-text">Initializing interface</div>
        <div class="progress-bar">
          <div class="progress-fill"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      // Wait for all content to load
      window.addEventListener('load', () => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
          loadingScreen.style.display = 'none';
        }, 500);
      });
    }
  });
</script>

<style>
  .loader-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 3rem;
  }

  .loader {
    position: relative;
    width: 200px;
    height: 200px;
    perspective: 1000px;
  }

  /* Floating circles */
  .hexagon-container {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
    animation: float 8s ease-in-out infinite;
  }

  .hexagon {
    position: absolute;
    inset: 0;
    transform: rotateY(calc(var(--index) * 60deg)) translateZ(40px);
  }

  .hexagon-inner {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 80px;
    height: 80px;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    background: linear-gradient(
      45deg,
      hsl(var(--primary)) 0%,
      transparent 70%
    );
    backdrop-filter: blur(4px);
    border: 1px solid hsl(var(--primary) / 0.5);
    box-shadow: 0 0 20px hsl(var(--primary) / 0.2);
    animation: float-circle 3s ease-in-out infinite;
    animation-delay: calc(var(--index) * 0.2s);
  }

  .hexagon:nth-child(even) .hexagon-inner {
    width: 60px;
    height: 60px;
    animation-duration: 4s;
    animation-direction: reverse;
  }

  /* Scanner effect */
  .scanner {
    position: absolute;
    inset: 0;
    border-radius: 50%;
    background: conic-gradient(
      from 0deg,
      transparent 0deg,
      hsl(var(--primary) / 0.2) 60deg,
      transparent 120deg
    );
    animation: scan 3s linear infinite;
  }

  /* Code rings */
  .code-rings {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
  }

  .ring {
    position: absolute;
    top: 50%;
    left: 50%;
    border: 1px dashed hsl(var(--primary) / 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%) rotateX(75deg) rotateY(calc(var(--ring) * 30deg));
  }

  .ring:nth-child(1) { width: 160px; height: 160px; }
  .ring:nth-child(2) { width: 120px; height: 120px; }
  .ring:nth-child(3) { width: 80px; height: 80px; }

  .ring-content {
    position: absolute;
    inset: 0;
    border-radius: 50%;
    background: repeating-linear-gradient(
      90deg,
      hsl(var(--primary) / 0.1) 0px,
      hsl(var(--primary) / 0.1) 2px,
      transparent 2px,
      transparent 4px
    );
    animation: rotate-ring 20s linear infinite;
    animation-delay: calc(var(--ring) * -4s);
  }

  /* Pulse rings */
  .pulse {
    position: absolute;
    top: 50%;
    left: 50%;
    width: calc(100% - var(--pulse) * 20px);
    height: calc(100% - var(--pulse) * 20px);
    border: 1px solid hsl(var(--primary) / 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    animation: pulse-ring 3s ease-out infinite;
    animation-delay: calc(var(--pulse) * 0.3s);
  }

  /* Status text and progress */
  .loader-status {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    min-width: 200px;
  }

  .status-text {
    color: hsl(var(--primary));
    font-size: 0.875rem;
    font-family: 'Inter', sans-serif;
    letter-spacing: normal;
    animation: status-blink 1s ease-in-out infinite;
  }

  .progress-bar {
    width: 100%;
    height: 2px;
    background: hsl(var(--primary) / 0.2);
    border-radius: 1px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: hsl(var(--primary));
    animation: progress 3s ease-in-out infinite;
  }

  /* Keyframes */
  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotateX(20deg) rotateY(0);
    }
    50% {
      transform: translateY(-10px) rotateX(25deg) rotateY(180deg);
    }
  }

  @keyframes float-circle {
    0%, 100% {
      opacity: 0.5;
      transform: translate(-50%, -50%) scale(1) translateY(0);
    }
    50% {
      opacity: 0.8;
      transform: translate(-50%, -50%) scale(1.1) translateY(-10px);
    }
  }

  @keyframes scan {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes rotate-ring {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes pulse-ring {
    0% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(0.8);
    }
    100% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(1.2);
    }
  }

  @keyframes status-blink {
    0%, 100% {
      opacity: 0.7;
    }
    50% {
      opacity: 1;
    }
  }

  @keyframes progress {
    0% {
      width: 0%;
    }
    50%, 100% {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loadingScreen = document.getElementById('loading-screen');
    const statusText = document.querySelector('.status-text');
    const messages = [
      'Initializing interface',
      'Loading components',
      'Preparing content',
      'Almost ready'
    ];
    let messageIndex = 0;

    // Update status message every second
    const messageInterval = setInterval(() => {
      if (messageIndex < messages.length) {
        statusText.textContent = messages[messageIndex];
        messageIndex++;
      }
    }, 1000);

    if (loadingScreen) {
      // Extend the loading time to 4 seconds
      window.addEventListener('load', () => {
        setTimeout(() => {
          clearInterval(messageInterval);
          loadingScreen.style.opacity = '0';
          setTimeout(() => {
            loadingScreen.style.display = 'none';
          }, 500);
        }, 4000); // Show loader for 4 seconds
      });
    }
  });
</script>