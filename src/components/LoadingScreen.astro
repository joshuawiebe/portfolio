---
---

<div
  id="loading-screen"
  class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-background"
>
  <div class="w-full max-w-md p-8 space-y-6">
    <div class="loading-status space-y-4">
      <div class="status-wrapper">
        <div id="loading-text" class="text-lg font-medium text-primary mb-2 text-center"></div>
        <div id="loading-percentage" class="text-sm text-muted-foreground text-center">0%</div>
      </div>
      <div class="progress-bar-wrapper">
        <div class="progress-bar h-1 bg-secondary overflow-hidden rounded-full">
          <div id="progress-fill" class="progress-fill h-full bg-primary w-0 transition-all duration-300 ease-out"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loadingStates = [
      { message: 'Initializing', duration: 500 },
      { message: 'Loading components', duration: 800 },
      { message: 'Preparing content', duration: 700 },
      { message: 'Optimizing display', duration: 500 },
      { message: 'Almost ready', duration: 500 }
    ];

    const loadingScreen = document.getElementById('loading-screen');
    const loadingText = document.getElementById('loading-text');
    const loadingPercentage = document.getElementById('loading-percentage');
    const progressFill = document.getElementById('progress-fill');

    let currentState = 0;
    let progress = 0;
    const totalDuration = loadingStates.reduce((acc, state) => acc + state.duration, 0);
    let startTime = Date.now();

    function updateLoader() {
      const currentTime = Date.now();
      const elapsedTime = currentTime - startTime;
      
      // Calculate total progress
      progress = Math.min((elapsedTime / totalDuration) * 100, 100);
      
      // Update percentage and progress bar
      loadingPercentage.textContent = `${Math.round(progress)}%`;
      progressFill.style.width = `${progress}%`;

      // Update loading state message
      let timeSum = 0;
      for (let i = 0; i < loadingStates.length; i++) {
        timeSum += loadingStates[i].duration;
        if (elapsedTime <= timeSum) {
          if (currentState !== i) {
            currentState = i;
            loadingText.textContent = loadingStates[i].message;
          }
          break;
        }
      }

      if (progress < 100) {
        requestAnimationFrame(updateLoader);
      } else {
        setTimeout(() => {
          loadingScreen.style.opacity = '0';
          setTimeout(() => {
            loadingScreen.style.display = 'none';
          }, 300);
        }, 200);
      }
    }

    updateLoader();
  });
</script>

<style>
  #loading-screen {
    transition: opacity 0.3s ease-out;
  }

  .progress-bar {
    position: relative;
    overflow: hidden;
  }

  .progress-fill {
    position: relative;
  }

  .progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      hsl(var(--primary) / 0.4),
      transparent
    );
    animation: shine 1.5s infinite;
  }

  @keyframes shine {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
</style>