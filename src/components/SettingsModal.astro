---
---

<dialog id="settings-modal" class="bg-background p-8 rounded-2xl shadow-2xl max-w-md w-full border border-border/50">
  <div class="flex flex-col gap-8">
    <div class="flex justify-between items-center border-b border-border/50 pb-4">
      <div class="flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="3" />
          <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z" />
        </svg>
        <h2 class="text-2xl font-bold text-foreground font-inter">Settings</h2>
      </div>
      <button
        class="text-muted-foreground hover:text-foreground transition-colors rounded-lg p-2 hover:bg-secondary/80"
        onclick="document.getElementById('settings-modal').close()"
        aria-label="Close settings"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 6L6 18M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="flex flex-col gap-6">
      <!-- Theme Selection -->
      <div class="space-y-4">
        <div class="flex justify-between items-center">
          <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="5"/>
              <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
            </svg>
            <h3 class="text-lg font-semibold text-foreground">Theme</h3>
          </div>
        </div>
        <div class="grid grid-cols-3 gap-2">
          <button
            class="theme-button"
            data-theme-value="light"
            aria-label="Light theme"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="5" />
              <line x1="12" y1="1" x2="12" y2="3" />
              <line x1="12" y1="21" x2="12" y2="23" />
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
              <line x1="1" y1="12" x2="3" y2="12" />
              <line x1="21" y1="12" x2="23" y2="12" />
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
            </svg>
            <span>Light</span>
          </button>
          <button
            class="theme-button"
            data-theme-value="dark"
            aria-label="Dark theme"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
            </svg>
            <span>Dark</span>
          </button>
          <button
            class="theme-button"
            data-theme-value="system"
            aria-label="System theme"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2" />
              <line x1="8" y1="21" x2="16" y2="21" />
              <line x1="12" y1="17" x2="12" y2="21" />
            </svg>
            <span>System</span>
          </button>
        </div>
      </div>

      <!-- Language Selection Coming Soon -->
      <div class="flex flex-col items-center justify-center text-center p-6 bg-secondary/20 rounded-xl space-y-4">
        <div class="relative">
          <div class="absolute inset-0 bg-primary/5 blur-2xl rounded-full"></div>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-primary relative" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" />
          </svg>
        </div>
        <div class="relative z-10 space-y-2">
          <h3 class="text-lg font-semibold text-foreground font-inter">Language Support Coming Soon!</h3>
          <p class="text-base text-muted-foreground font-inter">Multilingual support will be added in the next update.</p>
        </div>
      </div>
    </div>
  </div>
</dialog>

<style>
  dialog::backdrop {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
  }

  .theme-button {
    @apply flex items-center justify-center gap-2 p-2 rounded-lg text-sm font-medium
           text-muted-foreground hover:text-foreground transition-all duration-200
           border border-transparent hover:border-border hover:bg-secondary;
  }

  .theme-button[data-theme-selected="true"] {
    @apply bg-secondary text-foreground border-border;
  }
</style>

<script>
  // Initialize modal functionality
  const initModal = () => {
    const modal = document.getElementById('settings-modal') as HTMLDialogElement;
    const settingsButton = document.getElementById('settings-button');
    
    if (settingsButton && modal) {
      settingsButton.addEventListener('click', () => {
        if (!modal.open) {
          modal.showModal();
        }
      });

      // Close on click outside
      modal.addEventListener('click', (e) => {
        const dialogDimensions = modal.getBoundingClientRect();
        if (
          e.clientX < dialogDimensions.left ||
          e.clientX > dialogDimensions.right ||
          e.clientY < dialogDimensions.top ||
          e.clientY > dialogDimensions.bottom
        ) {
          modal.close();
        }
      });

      // Prevent closing when clicking inside
      const modalContent = modal.querySelector('div');
      if (modalContent) {
        modalContent.addEventListener('click', (e) => {
          e.stopPropagation();
        });
      }
    }
  };

  // Theme functionality
  const updateTheme = (newTheme: 'light' | 'dark' | 'system') => {
    // Update buttons
    document.querySelectorAll('.theme-button').forEach(button => {
      const isSelected = (button as HTMLElement).dataset.themeValue === newTheme;
      button.setAttribute('data-theme-selected', isSelected.toString());
    });

    // Handle system theme
    if (newTheme === 'system') {
      localStorage.removeItem('theme');
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      document.documentElement.setAttribute('data-theme', systemTheme);
    } else {
      localStorage.setItem('theme', newTheme);
      document.documentElement.setAttribute('data-theme', newTheme);
    }
  };

  // Initialize theme
  const initTheme = () => {
    const savedTheme = localStorage.getItem('theme');
    updateTheme(savedTheme as 'light' | 'dark' | 'system' || 'system');
  };

  // Add click handlers to theme buttons
  const addThemeHandlers = () => {
    document.querySelectorAll('.theme-button').forEach(button => {
      button.addEventListener('click', () => {
        const theme = (button as HTMLElement).dataset.themeValue as 'light' | 'dark' | 'system';
        updateTheme(theme);
      });
    });
  };

  // Watch for system theme changes
  if (typeof window !== 'undefined') {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
        updateTheme('system');
      }
    });
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', () => {
    initModal();
    initTheme();
    addThemeHandlers();
  });
  
  // Also initialize immediately in case we're not using view transitions
  initModal();
  initTheme();
  addThemeHandlers();
</script>