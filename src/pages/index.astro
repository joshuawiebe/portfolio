---
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import About from "../components/About.astro";
import Projects from "../components/Projects.astro";
import Experience from "../components/Experience.astro";
import Education from "../components/Education.astro";
import Footer from "../components/Footer.astro";
import LoadingScreen from "../components/LoadingScreen.astro";
import { siteConfig } from "../config";
import { languageStore } from "../store/theme";
import "../styles/global.css";
import "aos/dist/aos.css";

---

<html lang={languageStore.get()}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={siteConfig.description} />
    <meta name="theme-color" content="#000000" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <title set:html="Joshua Wiebe | Full Stack Developer" />
  </head>
  <body>
    <LoadingScreen />
    <Header />
    <main class="min-h-screen">
      <Hero />
      <About />
      <Projects />
      <Experience />
      <Education />
    </main>
    <Footer />

    <script>
      import AOS from 'aos';
      AOS.init({
        duration: 800,
        easing: 'ease-out-cubic',
        once: true,
        offset: 50
      });
    </script>

    <script is:inline>
      // Theme and language initialization

      // Initialize theme and language based on system preferences
      if (typeof window !== 'undefined') {
        // Initialize theme
        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        const savedTheme = localStorage.getItem('theme');
        const theme = savedTheme === 'light' || savedTheme === 'dark' ? savedTheme : systemTheme;
        document.documentElement.setAttribute('data-theme', theme);

        // Initialize language
        const systemLang = navigator.language.toLowerCase().startsWith('de') ? 'de' : 'en';
        if (!localStorage.getItem('language')) {
          languageStore.set(systemLang);
        }
      }

      // Intersection Observer for reveal animations
      const observerCallback = (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
          }
        });
      };

      const observer = new IntersectionObserver(observerCallback, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      });

      // Observe all sections
      document.querySelectorAll('section').forEach(section => {
        section.classList.add('reveal');
        observer.observe(section);
      });
    </script>
  </body>
</html>
